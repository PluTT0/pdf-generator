import openai
import requests
import json
import os
import logging
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account
from dotenv import load_dotenv
from openai import OpenAI
from weasyprint import HTML
from datetime import datetime
from os.path import abspath
load_dotenv()



# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è API-–∫–ª—é—á—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SERVICE_ACCOUNT_FILE = os.getenv("SERVICE_ACCOUNT_FILE")
DOCUMENT_TEMPLATE_ID = os.getenv("DOCUMENT_TEMPLATE_ID")
TEMPLATE_PATH = "templates/template.html"
IMAGE_FOLDER = "generated_images"
SAVE_FOLDER = "generated_pdf"
client = OpenAI(api_key=OPENAI_API_KEY)


if not OPENAI_API_KEY or not SERVICE_ACCOUNT_FILE or not DOCUMENT_TEMPLATE_ID:
    logging.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    exit(1)

# Google Docs & Drive API Credentials
SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.file'
]

# Authenticate Google API
try:
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    docs_service = build('docs', 'v1', credentials=credentials)
    drive_service = build('drive', 'v3', credentials=credentials)
except Exception as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Google API: {e}")
    exit(1)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ OpenAI API
def generate_content(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": "You are a professional PDF document generator and structured HTML documents."},
                {"role": "user", "content": f"Generate an HTML template for a PDF document on the topic: {prompt}. HTML should be complete: - Full structure (`<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`) - Beautifully designed header - Tables, lists or blocks for structuring data - Add examples of filling. Do not use CSS frameworks, only basic inline-CSS. Generate text in English."}],
        )
        return response.choices[0].message.content
    except openai.OpenAIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return ""
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é: {e}")
        return ""

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ OpenAI DALL¬∑E
def generate_image(prompt):
    if not os.path.exists(IMAGE_FOLDER):
        os.makedirs(IMAGE_FOLDER)
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        response = client.images.generate(prompt=prompt, model="dall-e-3", size="1024x1024", n=1)
        image_url = response.data[0].url

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_data = requests.get(image_url).content
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        image_path = os.path.join(IMAGE_FOLDER, f"image_{timestamp}.svg")

        with open(image_path, "wb") as file:
            file.write(image_data)

        print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {image_path}")
        return image_path
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è Google Docs –∑ —Ç–µ–∫—Å—Ç–æ–º
def update_google_doc(doc_id, content):
    try:
        requests = [{
            'insertText': {
                'location': {'index': 1},
                'text': content
            }
        }]
        docs_service.documents().batchUpdate(
            documentId=doc_id,
            body={'requests': requests}
        ).execute()
        return f"Google Doc Updated: https://docs.google.com/document/d/{doc_id}/edit"
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Google Docs: {e}")
        return ""

# –ï–∫—Å–ø–æ—Ä—Ç —É PDF –∑ Google Docs
def export_pdf(doc_id):
    pdf_file = f"output_{doc_id}.pdf"
    try:
        request = drive_service.files().export_media(fileId=doc_id, mimeType='application/pdf')
        with open(f"output_{doc_id}.pdf", "wb") as pdf_file:
            pdf_file.write(request.execute())
        print("‚úÖ –§–∞–π–ª –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        """ if os.path.exists(pdf_file):
            os.remove(pdf_file)
            print(f"üóë –§–∞–π–ª {pdf_file} –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            print("‚ö† –§–∞–π–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.") """
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Ñ–∞–π–ª—É: {e}")


def generate_pdf(content, image_path):
    """
    –ì–µ–Ω–µ—Ä—É—î PDF –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º.
    :param content: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —É PDF.
    :param image_path: –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    """
    try:
        if not os.path.exists(TEMPLATE_PATH):
            raise FileNotFoundError(f"‚ùå –®–∞–±–ª–æ–Ω HTML –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {TEMPLATE_PATH}")

        with open(TEMPLATE_PATH, "r", encoding="utf-8") as file:
            html_template = file.read()

        # –ó–∞–º—ñ–Ω—é—î–º–æ {content} —É —à–∞–±–ª–æ–Ω—ñ –Ω–∞ —Ç–µ–∫—Å—Ç
        final_html = html_template.replace("{content}", content)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if image_path and os.path.exists(image_path):
            image_abs_path = abspath(image_path)
            image_tag = f'<img src="{image_abs_path}" alt="Generated Image" style="width:100%;">'
            final_html = final_html.replace("{image}", image_tag)
        else:
            final_html = final_html.replace("{image}", "")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
        if not os.path.exists(SAVE_FOLDER):
            os.makedirs(SAVE_FOLDER)

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        output_pdf = os.path.join(SAVE_FOLDER, f"report_{timestamp}.pdf")
        print(type(final_html))
        # –ì–µ–Ω–µ—Ä—É—î–º–æ PDF
        HTML(string=content).write_pdf(output_pdf)
        logging.info(f"‚úÖ PDF –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {output_pdf}")
        return output_pdf
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF: {e}")
        return None


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF —ñ–∑ HTML —á–µ—Ä–µ–∑ WeasyPrint
def generate_pdf_with_weasyprint(html_content, output_filename="local_output.pdf"):
    try:
        HTML(string=html_content).write_pdf(output_filename)
        logging.info(f"‚úÖ PDF (–ª–æ–∫–∞–ª—å–Ω–∏–π) –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {output_filename}")
        return output_filename
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PDF: {e}")
        return None


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É: —Å—Ç–≤–æ—Ä—é—î PDF –∑ –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º.
    """
    try:
        #topic = "–Ø–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –¥–µ–Ω—å"
        #content = "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
        image_path = "./generated_images/img.svg"
        prompt = f"–¢–∞–±–ª–∏—Ü—è –∑–≤–∏—á–æ–∫ (–¥–∞—Ç–∞ + –≤–∏–∫–æ–Ω–∞–Ω–æ/–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ)"
        #image_prompt = "An illustration of a person planning their daily tasks in a modern workspace"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content = generate_content(prompt)
        new_content = content.replace("```html", "").replace("```", "")
        print(new_content)
        if not content:
            logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç.")
            return
        
        if not os.path.exists(image_path):
            logging.warning(f"‚ö† –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}. –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ PDF –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

        pdf_path = generate_pdf(content=new_content, image_path=image_path)
        pdf_two = generate_pdf_with_weasyprint(new_content, output_filename="local_output.pdf")

        if pdf_path:
            logging.info(f"üìÑ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {pdf_path}")
            logging.info(f"üìÑ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {pdf_two}")
        else:
            logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF.")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")

# –ì–æ–ª–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
'''def main():
    try:
        topic = "–Ø–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –¥–µ–Ω—å"
        prompt = f"–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –≥–∞–π–¥ –ø—Ä–æ {topic} —É —Ñ–æ—Ä–º–∞—Ç—ñ —á–µ–∫-–ª–∏—Å—Ç–∞."
        image_prompt = "An illustration of a person planning their daily tasks in a modern workspace"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content = generate_content(prompt)
        print(content)
        if not content:
            logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç.")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_file = generate_image(image_prompt)
        if not image_file:
            return

        update_response = update_google_doc(DOCUMENT_TEMPLATE_ID, content)
        pdf_response = export_pdf(DOCUMENT_TEMPLATE_ID)

        # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ image_file –≤ generate_pdf
        generate_pdf(content=content, image_path=image_file)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑ image_path

        logging.info(update_response)
        logging.info(f"üìÑ Google Docs PDF: {pdf_response}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")'''

if __name__ == "__main__":
    main()
